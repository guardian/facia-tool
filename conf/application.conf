akka {
  akka.loggers = ["akka.event.Logging$DefaultLogger", "akka.event.slf4j.Slf4jLogger"]
  loglevel = WARNING
  actor {
    default-dispatcher = {
      fork-join-executor {
        parallelism-factor = 1.0
        parallelism-max = 24
      }
    }
    java-futures = {
      fork-join-executor {
        parallelism-factor = 1.0
        parallelism-max = 1
      }
    }
    front-press = {
      fork-join-executor {
        parallelism-factor = 1.0
        parallelism-max = 4
      }
    }
    memcached = {
      fork-join-executor {
        parallelism-factor = 1.0
        parallelism-max = 24
      }
    }
  }
}

play {
  application {
    loader: Loader
  }

  crypto {
    # The secret key is used to secure cryptographics functions.
    # If you deploy your application to several instances be sure to use the same key!
    secret: "test"
  }

  evolutions {
    db.default.autoApply=true
    # Rather than commit evolutions line by line we can take advantage of Postgres' transactional
    # DDL (Data Definition Language, basically creating tables and whatnot) to commit all 'Ups' at once!
    # This makes cleaning up the database much easier :)
    # If we ever move away from Postgres we'll need to revisit this!!!
    autocommit: false
  }

  il8n {
    langs: "en"
  }

  ws {
    compressionEnabled: true
    useragent: "facia-tool"
  }

  http {
    session {
      secure=true
    }
  }

  filters {
    cors {
      allowedHttpMethods: ["GET"]
      allowedHttpHeaders: ["X-Requested-With","Origin","Accept","Content-Type"]
    }
  }
}

analytics {
    secret: "well-it's-a-secret"
}

aws {
    region: "eu-west-1"
    bucket: "aws-frontend-store"
    frontsBucket: "facia-tool-store"
    publishedEditionsIssuesBucket: "published-editions-code"
    previewEditionsIssuesBucket: "preview-editions-code"
}
PROD.aws.publishedEditionsIssuesBucket: "published-editions-prod"
PROD.aws.previewEditionsIssuesBucket: "preview-editions-prod"

pandomain {
  service: "fronts"
  roleArn: "arn:aws:iam::753338109777:role/Fronts-panda-IAM-FaciaToolRole-NKNXCYEGL0F6"
  bucketName: "pan-domain-auth-settings"
}

sentry {
    publicDSN: "https://4527e03d554a4962ae99a7481e9278ff@app.getsentry.com/35467"
}

switchboard {
  bucket: "facia-switches"
  object: "CODE/status.json"
}

PROD {
  switchboard.object: "PROD/status.json"
}

permissions {
    cache: "permissions-cache/CODE"
}
PROD {
  permissions.cache: "permissions-cache/PROD"
}

publish_events.queue_url="https://sqs.eu-west-1.amazonaws.com/163592447864/publish-events-CODE"
PROD {
  publish_events.queue_url="https://sqs.eu-west-1.amazonaws.com/163592447864/publish-events-PROD"
}

faciatool.sns.tool_topic_arn="arn:aws:sns:eu-west-1:163592447864:facia-CODE-FrontsUpdateSNSTopic-RepwK3g95V3w"
PROD {
    faciatool.sns.tool_topic_arn="arn:aws:sns:eu-west-1:163592447864:facia-PROD-FrontsUpdateSNSTopic-kWN6oX2kvOmI"
}

faciatool.show_test_containers=true

feast_app.topic_arn = "arn:aws:sns:eu-west-1:163592447864:feast-facia-test"
include "local.conf"

include file("/etc/gu/facia-tool.application.secrets.conf")
