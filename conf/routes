# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

GET         /_healthcheck                            controllers.StatusController.healthStatus

# authentication endpoints
GET         /authError                               controllers.PandaAuthController.authError(message:String)
GET         /oauthCallback                           controllers.PandaAuthController.oauthCallback
GET         /logout                                  controllers.PandaAuthController.logout
GET         /login/status                            controllers.PandaAuthController.status

# healthcheck
GET         /status                                  controllers.StatusController.healthStatus

# static files
GET         /assets/client-v2/*file                  controllers.V2Assets.at(path="", file)
GET         /assets/*file                            controllers.UncachedAssets.at(path="", file)

##################### NOTE ############################
#all endpoints below this line should be authenticated#
#######################################################

# Fronts
GET         /                                        controllers.ViewsController.priorities()
GET         /editorial                               controllers.ViewsController.collectionEditor(priority="editorial")
GET         /commercial                              controllers.ViewsController.collectionEditor(priority="commercial")
GET         /training                                controllers.ViewsController.collectionEditor(priority="training")
GET         /email                                   controllers.ViewsController.collectionEditor(priority="email")
GET         /edition                                 controllers.ViewsController.collectionEditor(priority="edition")

GET         /editorial/config                        controllers.ViewsController.configEditor()
GET         /commercial/config                       controllers.ViewsController.configEditor()
GET         /training/config                         controllers.ViewsController.configEditor()
GET         /email/config                            controllers.ViewsController.configEditor()
GET         /edition/config                          controllers.ViewsController.configEditor()

POST        /collection/publish/*collectionId        controllers.FaciaToolController.publishCollection(collectionId)
POST        /collection/discard/*collectionId        controllers.FaciaToolController.discardCollection(collectionId)

POST        /press/live/*path                        controllers.FaciaToolController.pressLivePath(path)
POST        /press/draft/*path                       controllers.FaciaToolController.pressDraftPath(path)

GET         /front/lastmodified/*path                controllers.PressController.getLastModified(path)
GET         /front/lastmodifiedstatus/:stage/*path   controllers.PressController.getLastModifiedStatus(stage, path)

GET         /collection/*collectionId                controllers.FaciaToolController.getCollection(collectionId)
# The below endpoint is a GET but it was decided to send params in the body as they were more than just ids
# a pragmatic decision if not a semantic one
POST        /collections                             controllers.FaciaToolV2Controller.getCollections
POST        /edits                                   controllers.FaciaToolController.collectionEdits
POST        /v2Edits                                 controllers.FaciaToolV2Controller.collectionEdits
POST        /collection/v2Discard/*collectionId      controllers.FaciaToolV2Controller.discardCollection(collectionId)
GET         /config                                  controllers.FaciaToolController.getConfig
GET         /defaults                                controllers.DefaultsController.configuration()
GET         /metadata                                controllers.FaciaToolController.getMetadata()

POST        /treats/*collectionId                    controllers.FaciaToolController.treatEdits(collectionId)

PUT        /userdata/clipboard                       controllers.UserDataController.putClipboardContent()
PUT        /userdata/frontIds                        controllers.UserDataController.putFrontIds()
PUT        /userdata/frontIdsByPriority              controllers.UserDataController.putFrontIdsByPriority()
PUT        /userdata/favouriteFrontIdsByPriority     controllers.UserDataController.putFavouriteFrontIdsByPriority()
# For temporary internal use -- migrates user data to a new format
PUT        /userdata/migrate                         controllers.UserDataController.migrateUserData()

# endpoints for proxying https
GET         /api/preview/*path                       controllers.FaciaContentApiProxy.capiPreview(path)
GET         /api/live/*path                          controllers.FaciaContentApiProxy.capiLive(path)
GET         /http/proxy/*url                         controllers.FaciaContentApiProxy.http(url)
GET         /json/proxy/*absUrl                      controllers.FaciaContentApiProxy.json(absUrl)
GET         /ophan/*path                             controllers.FaciaContentApiProxy.ophan(path)

# thumbnails
GET         /thumbnails/*id.svg                      controllers.ThumbnailController.container(id)

# Updating config

POST        /config/fronts                           controllers.FrontController.create()
POST        /config/fronts/*path                     controllers.FrontController.update(path)

POST        /config/collections                      controllers.CollectionController.create()
POST        /config/collections/*collectionId        controllers.CollectionController.update(collectionId)


# Stories visible
POST        /stories-visible/*containerType          controllers.StoriesVisibleController.storiesVisible(containerType)

# Vanity URL
GET         /breaking-news                           controllers.VanityRedirects.breakingnews
GET         /*path/                                  controllers.VanityRedirects.untrail(path: String)

# Admin
GET         /troubleshoot                            controllers.TroubleshootController.troubleshoot(section="stale")
GET         /troubleshoot/*section                   controllers.TroubleshootController.troubleshoot(section)

# React App
GET         /v2                                      controllers.V2App.index(path="")
GET         /v2/*path                                controllers.V2App.index(path)

# Grid Usages
POST        /api/usage                               controllers.GridProxy.addUsage()


